name: ci

on:
  push:

jobs:

  staticcheck:

    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - uses: dominikh/staticcheck-action@v1
        with:
          version: "2023.1.6"
  tests:

    strategy:
      matrix:
        name: [unit]
        go-version: ['1.21']
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    name: test (${{ matrix.name }}, ${{ matrix.os }})
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
          cache: true
      - name: go mod package cache
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('tests/go.sum') }}
      - name: Run ${{ matrix.name }}-${{ matrix.os }} tests
        run: make test

  builds:

    timeout-minutes: 20
    strategy:
      matrix:
        go-version: ['1.21']
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    name: build (${{ matrix.os }})

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Build
      run: make build

  release-linux-binaries:
    if: github.ref_type == 'tag'
    needs: [tests, staticcheck, builds]
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Install GCC
        run: sudo apt-get -y install build-essential gcc libmpfr-dev libgmp3-dev libmpc-dev gcc-aarch64-linux-gnu gcc-x86-64-linux-gnu clang-12 --install-suggests

      - name: goreleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          version: latest
          args: release --rm-dist --config goreleaser-linux.yml
        env:
          GITHUB_USER: ${{ github.repository_owner }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#      - name: goreleaser
#        uses: docker://goreleaser/goreleaser:latest
#        env:
#          GITHUB_USER: ${{ github.repository_owner }}
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          args: release --config goreleaser-linux.yml

  release-docker-images:
    if: github.ref_type == 'tag'
    runs-on: ubuntu-latest
    needs: [tests, staticcheck, builds, release-linux-binaries]

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Convert owner to lower case
      run: |
        echo "OWNER_LC=${OWNER,,}" >>${GITHUB_ENV}
      env:
        OWNER: '${{ github.repository_owner }}'

    - name: Login to image repository
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GH_ACCESS_TOKEN }}

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ env.OWNER_LC }}/kafka-confluent-go-consumer
        flavor: latest=true
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern=v{{version}}

    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.consumer
        platforms: linux/amd64,linux/arm64
        push: true
        provenanance: false
        sbom: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
